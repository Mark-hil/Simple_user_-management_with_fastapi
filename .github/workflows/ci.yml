name: User mgnt with FastAPI (Docker Compose)

on:
  push:
    branches:
      - main
    tags:
      - "v*"  # Runs when a version tag like v1.0.0 is pushed
  pull_request:
    branches:
      - main

jobs:
  checkout:
    name: Checkout Repository
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

  setup-python:
    name: Set up Python
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

  install-dependencies:
    name: Install Dependencies
    runs-on: ubuntu-latest
    needs: setup-python
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  format-black:
    name: Format Code with Black
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Black
        run: pip install black

      - name: Run Black
        run: black . --check

  lint-flake8:
    name: Lint Code with Flake8
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Flake8
        run: pip install flake8

      - name: Run Flake8
        run: flake8 . --count --max-line-length=88 --statistics

  run-tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Testing Tools
        run: pip install pytest httpx

    #   - name: Run Tests
    #     run: pytest

  build-docker:
    name: Build Docker Image with Compose
    runs-on: ubuntu-latest
    needs: [run-tests, format-black, lint-flake8]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Set Image Tag
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "IMAGE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "IMAGE_VERSION=latest" >> $GITHUB_ENV
          fi

      - name: Build Docker Image using Compose
        run: docker-compose build

      - name: Save Docker Image for Next Job
        run: docker save simple-user-management-fastapi-app:${IMAGE_VERSION} -o image.tar

      - name: Upload Docker Image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar

  test-docker-container:
    name: Test Docker Container
    runs-on: ubuntu-latest
    needs: build-docker
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Docker Image
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker Image
        run: docker load -i image.tar

      - name: Start Docker Compose Services
        run: |
          docker-compose up -d
          sleep 5  # Wait for services to start

      - name: Test API Health Check
        run: |
          curl --fail http://localhost:8000/health || exit 1

      - name: Debug Running Containers
        run: docker ps -a && docker logs $(docker ps -q --filter "name=app")

      - name: Stop Docker Compose Services
        run: docker-compose down

  push-docker:
    name: Push Docker Image
    runs-on: ubuntu-latest
    needs: test-docker-container
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Download Docker Image
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker Image
        run: docker load -i image.tar

      - name: Set Image Tag
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "IMAGE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "IMAGE_VERSION=latest" >> $GITHUB_ENV
          fi

      - name: Push Docker Image to Docker Hub
        run: |
          docker tag simple-user-management-fastapi-app:${IMAGE_VERSION} ${{ secrets.DOCKER_USERNAME }}/simple-user-management-fastapi-app:${IMAGE_VERSION}
          docker push ${{ secrets.DOCKER_USERNAME }}/simple-user-management-fastapi-app:${IMAGE_VERSION}

          if [[ "$IMAGE_VERSION" == "latest" ]]; then
            docker tag ${{ secrets.DOCKER_USERNAME }}/simple-user-management-fastapi-app:latest ${{ secrets.DOCKER_USERNAME }}/simple-user-management-fastapi-app:latest
            docker push ${{ secrets.DOCKER_USERNAME }}/simple-user-management-fastapi-app:latest
          fi
