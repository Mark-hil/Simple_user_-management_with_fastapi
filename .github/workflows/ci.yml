name: User mgnt with FastAPI

on:
  push:
    branches:
      - main
    tags:
      - "v*"  # Runs when a version tag like v1.0.0 is pushed
  pull_request:
    branches:
      - main

jobs:
  install:
    name: Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  lint:
    name: Run Linting
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Linting Tools
        run: pip install black flake8

      - name: Format Code with Black
        run: black . --check

      - name: Lint with Flake8
        run: flake8 . --count --max-line-length=88 --statistics

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Testing Tools
        run: pip install pytest httpx

      - name: Run Tests
        run: pytest

  build-and-test-container:
    name: Build & Test Docker Container
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Image Tag
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "IMAGE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "IMAGE_VERSION=latest" >> $GITHUB_ENV
          fi

      - name: Build Docker Image
        run: |
          docker build -t simple-user-management-fastapi-app:${IMAGE_VERSION} .

      - name: Start Docker Container
        run: |
          docker run -d -p 8000:8000 --name test-container simple-user-management-fastapi-app:${IMAGE_VERSION}
          sleep 5  # Wait for the container to start

      - name: Test API Health Check
        run: |
          curl --fail http://localhost:8000/health || exit 1

      - name: Stop and Remove Container
        run: docker stop test-container && docker rm test-container

  push:
    name: Push Docker Image to Docker Hub
    runs-on: ubuntu-latest
    needs: build-and-test-container  # Ensure the container test passed before pushing
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set Image Tag
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "IMAGE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "IMAGE_VERSION=latest" >> $GITHUB_ENV
          fi

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/simple-user-management-fastapi-app:${IMAGE_VERSION} .
          docker push ${{ secrets.DOCKER_USERNAME }}/simple-user-management-fastapi-app:${IMAGE_VERSION}

          if [[ "$IMAGE_VERSION" == "latest" ]]; then
            docker tag ${{ secrets.DOCKER_USERNAME }}/simple-user-management-fastapi-app:latest ${{ secrets.DOCKER_USERNAME }}/simple-user-management-fastapi-app:latest
            docker push ${{ secrets.DOCKER_USERNAME }}/simple-user-management-fastapi-app:latest
          fi
